import openai

# Set the API key
openai.api_key = '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'

# Read the blog post draft from the file
with open('blog_post_draft.txt', 'r') as f:
    draft = f.read()
with open('editor_notes.txt', 'r') as f:
    editor_notes = f.read()
with open('seo_notes.txt', 'r') as f:
    seo_notes = f.read()
with open('photos.txt', 'r') as f:
    photo_suggestions = f.read()

def final_blog_post(draft, editor_notes, seo_notes, photo_suggestions):
    
    system_message = "You are a skilled production editor that manages content production for a publication. You have over 10+ years of experience with proofreading, copyediting, extensive formatting checks, and more."

    # Construct a conversation with the system message and the blog post draft, editor notes, SEO notes, and photo suggestions
    conversation = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": f"Please review the following draft blog post and create a final blog post utilizing all information: {draft}"},
        {"role": "user", "content": f"Use these notes from the Editor: {editor_notes}"},
        {"role": "user", "content": f"Use these notes from the SEO Exprt: {seo_notes}"},
        {"role": "user", "content": f"Use these notes from the Photo Researcher: {photo_suggestions}"}
    ]

    # Generate the suggestions using OpenAI
    response = openai.ChatCompletion.create(
      model="gpt-3.5-turbo",
      messages=conversation
    )

    # Extract the suggestions generated by the AI
    suggestions = response['choices'][0]['message']['content']
    print("Production Editor Post Completed! \n")

    return suggestions