import openai
import os, sys, json
from pathlib import Path

def seo_notes(draft, keywords):
    
    p = Path(os.path.dirname(__file__))
    parent_folder = p.parent
    
    with open(os.path.join(parent_folder, 'config.json'), 'r') as f:
        config = json.load(f)
    
    API_KEY = config['API_KEY']
    openai.api_key = API_KEY
    
    if getattr(sys, 'frozen', False):
    # The application is running as a bundled executable
        app_path = sys.executable
        p = Path(app_path).parents[1]
    
    else:
    # The application is running as a standard Python script
        app_path = os.path.dirname(os.path.abspath(__file__))
        p = Path(app_path).parents[0]
        

    # Now application_path will always point to the folder containing your application,
    # whether it's running as a script or as a bundled executable.
    application_path = p.joinpath('Outputs/')
    file_path = os.path.join(application_path, 'blog_post_draft.txt')
    
    
    # Read the blog post draft from the file
    with open(file_path, 'r') as f:
        draft = f.read()
    
    system_message = "You are an experienced SEO Specialist that understands the ins and outs and intricacies of organic search to get websites and webpages to rank well."

    # Construct a conversation with the system message and the blog post draft
    conversation = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": f"Please review the following blog post and provide notes to improve ranking in search engines: {draft}. Please provide suggestions to improve the content itself and not general tips for better SEO."},
        {"role": "system", "content": f"These keywords (separted by commas) were asked to be included{': '.join(keywords)}. Take these into consideration, but you are the expert on what is relavent to use or not. Suggestions for better use of keywords are good, but not 100% necessary for your notes."}
    ]
    
    print("Generating notes for SEO. \n")

    # Generate the SEO's notes using OpenAI
    response = openai.ChatCompletion.create(
      model="gpt-3.5-turbo",
      messages=conversation
    )

    # Extract the suggestions generated by the AI
    seo = response['choices'][0]['message']['content']
    print("SEO Expert's Notes Completed! Passing to the Photo Researcher... \n")

    return seo