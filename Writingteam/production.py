import openai
import sys, os, json
from pathlib import Path

def final_blog_post(draft, editor_notes, seo_notes, photo_suggestions):
    
    p = Path(os.path.dirname(__file__))
    parent_folder = p.parent
    
    with open(os.path.join(parent_folder, 'config.json'), 'r') as f:
        config = json.load(f)
    
    API_KEY = config['API_KEY']
    openai.api_key = API_KEY
    
    if getattr(sys, 'frozen', False):
    # The application is running as a bundled executable
        app_path = sys.executable
        p = Path(app_path).parents[1]

    else:
    # The application is running as a standard Python script
        app_path = os.path.dirname(os.path.abspath(__file__))
        p = Path(app_path).parents[0]

    # Now application_path will always point to the folder containing your application,
    # whether it's running as a script or as a bundled executable.
    application_path = p.joinpath('Outputs/')
    draft_file_path = os.path.join(application_path, 'blog_post_draft.txt')
    edit_file_path = os.path.join(application_path, 'editor_notes.txt')
    seo_file_path = os.path.join(application_path, 'seo_notes.txt')
    photo_file_path = os.path.join(application_path, 'photos.txt')

    with open(draft_file_path, 'r') as f:
        draft = f.read()
    with open(edit_file_path, 'r') as f:
        editor_notes = f.read()
    with open(seo_file_path, 'r') as f:
        seo_notes = f.read()
    with open(photo_file_path, 'r') as f:
        photo_suggestions = f.read()

    system_message = "You are a skilled production editor that manages content production for a publication. You have over 10+ years of experience with proofreading, copyediting, extensive formatting checks, and more."

    # Construct a conversation with the system message and the blog post draft, editor notes, SEO notes, and photo suggestions
    conversation = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": f"Please review the following draft blog post and create a final blog post utilizing all given information. This is the first draft: {draft}"},
        {"role": "user", "content": f"Use these notes from the Editor: {editor_notes}. Try to incorporate all notes that better the post as a whole."},
        {"role": "user", "content": f"Use these notes from the SEO Exprt: {seo_notes}. Make changes to the post as necessary to fit SEO requirements."},
        {"role": "user", "content": f"Use these notes from the Photo Researcher: {photo_suggestions}. If possible, include where each photo should be placed within the final post after the sentence or paragraph that it is relevant for."},
        {"role": "system", "content": f"While you trust your team to create and gather content, it is your job to create the best experience and you are free to not incorporate every note/suggestion."}
    ]
    
    print("Generating Final Blog Post... \n")

    # Generate the suggestions using OpenAI
    MODEL = config['GPT_MODEL']
    response = openai.ChatCompletion.create(
      model=MODEL,
      messages=conversation
    )

    # Extract the suggestions generated by the AI
    final_output = response['choices'][0]['message']['content']
    print("Production Editor Post Completed! \n")

    return final_output